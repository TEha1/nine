# Djangoimport binasciiimport osfrom django.db import modelsfrom django.db.models.signals import post_savefrom django.dispatch import receiverfrom django.utils.translation import gettext_lazy as _# Create your models here.class Country(models.Model):    name = models.CharField(max_length=50, verbose_name=_('name'))    class Meta:        verbose_name = _("Country")        verbose_name_plural = _("Countries")    def __str__(self):        return self.nameclass User(models.Model):    MALE = 1    FEMALE = 2    GENDER_CHOICES = [        (MALE, "ذكر"),        (FEMALE, "أنثي"),    ]    username = models.CharField(max_length=50, default="مستخدم جديد", unique=True, verbose_name=_('username'))    email = models.EmailField(max_length=100, null=True, blank=True, verbose_name=_('email'))    mobile = models.CharField(max_length=15, unique=True, verbose_name=_('Mobile number'))    gender = models.PositiveSmallIntegerField(choices=GENDER_CHOICES, null=True, blank=True, verbose_name=_('gender'))    country = models.ForeignKey(to=Country, on_delete=models.CASCADE, null=True, blank=True, verbose_name=_('country'))    is_seller = models.BooleanField(null=True, blank=True, verbose_name=_('is_seller'))    password = models.CharField(max_length=500, blank=True, null=True, verbose_name=_('password'))    is_active = models.BooleanField(default=False, verbose_name=_('is_active'))    is_authenticated = models.BooleanField(default=False, verbose_name=_('is_authenticated'))    class Meta:        verbose_name = _("User")        verbose_name_plural = _("Users")    def __str__(self):        if self.username is not None:            return self.username        elif self.mobile is not None:            return self.mobile        else:            return self.pkclass Token(models.Model):    key = models.CharField(_("Key"), max_length=40, primary_key=True)    user = models.OneToOneField(User, related_name='auth_token', on_delete=models.CASCADE, verbose_name=_("user"))    def save(self, *args, **kwargs):        if not self.key:            self.key = self.generate_key()        return super().save(*args, **kwargs)    def generate_key(self):        return binascii.hexlify(os.urandom(20)).decode()    class Meta:        verbose_name = _("TOken")        verbose_name_plural = ("Tokens")    def __str__(self):        return str(self.key)@receiver(post_save, sender=User)def CreateToken(sender, instance, created, **kwargs):    if created:        token = Token.objects.create(user=instance)